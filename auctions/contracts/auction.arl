archetype auction(
    owner: address,
    protocol_fee: nat,
    transfer_manager: address,
    auction_storage: address
)
with metadata ""

constant AUCTION_ALREADY_EXISTS: string = "AUCTION_ALREADY_EXISTS"
constant AUCTION_NOT_IN_PROGRESS: string = "AUCTION_NOT_IN_PROGRESS"
constant AUCTION_NOT_FINISHABLE: string = "AUCTION_NOT_FINISHABLE"
constant AUCTION_FINISHED: string = "AUCTION_FINISHED"
constant AUCTION_START_DATE_IN_THE_PAST: string = "AUCTION_START_DATE_IN_THE_PAST"
constant MISSING_AUCTION: string = "MISSING_AUCTION"
constant AUCTION_BID_TOO_LOW: string = "AUCTION_BID_TOO_LOW"
constant AUCTION_BID_ALREADY_EXISTS: string = "AUCTION_BID_ALREADY_EXISTS"
constant AUCTION_BID_AMOUNT_MISMATCH: string = "AUCTION_BID_AMOUNT_MISMATCH"
constant NO_BID_FOR_AUCTION: string = "NO_BID_FOR_AUCTION"
constant AUCTION_WITH_BID_NON_CANCELLABLE: string = "AUCTION_WITH_BID_NON_CANCELLABLE"
constant FINISHED_AUCTION_NON_CANCELLABLE: string = "FINISHED_AUCTION_NON_CANCELLABLE"
constant ONLY_SELLER_CAN_CANCEL_AUCTION: string = "ONLY_SELLER_CAN_CANCEL_AUCTION"
constant CANT_UNPACK_FA2_BUY_ASSET: string = "CANT_UNPACK_FA2_BUY_ASSET"
constant CANT_UNPACK_FA12_BUY_ASSET: string = "CANT_UNPACK_FA12_BUY_ASSET"
constant WRONG_BUY_ASSET_PAYLOAD: string = "WRONG_BUY_ASSET_PAYLOAD"

//----------------------------------------------------------------------------
// Owner role transfer
//----------------------------------------------------------------------------

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  called by opt_get(owner_candidate)
  effect {
    owner := opt_get(owner_candidate);
    owner_candidate := none
  }
}

//----------------------------------------------------------------------------
// Auction variables
//----------------------------------------------------------------------------
variable extension_duration : duration = 15m
variable max_duration : duration = 1000d


//----------------------------------------------------------------------------
// Admin
//----------------------------------------------------------------------------
entry set_auction_storage_contract(sacs_contract : address) {
  called by owner
  effect {
    auction_storage := sacs_contract;
  }
}

entry set_extension_duration(sed : duration) {
  called by owner
  effect {
    extension_duration := sed;
  }
}

entry set_max_duration(smd : duration) {
  called by owner
  effect {
    max_duration := smd;
  }
}

entry set_protocol_fee(spf : nat) {
  called by owner
  effect {
    protocol_fee := spf;
  }
}

//----------------------------------------------------------------------------
// Types
//----------------------------------------------------------------------------
enum asset_type =
| XTZ
| FA12
| FA2


record FA2_asset {
  fa2_asset_contract : address;
  fa2_asset_token_id: nat;
}

record FA12_asset {
  fa12_asset_contract : address;
}

record transfer_param {
  destination_address: address;
  token_id: nat;
  token_amount: nat
} as ((%to, (token_id, amount)))

record process_transfer_param {
  ptp_asset_type: asset_type;
  ptp_asset: bytes;
  ptp_amount: nat;
  ptp_origin: address;
  ptp_destination: address;
}

record part {
  part_account : address;
  part_value   : nat;
}

record fees {
  origin_fees : list<part>;
  payouts: list<part>;
}

record bid {
  bid_payouts : list<part>;
  bid_origin_fees : list<part>;
  bid_amount : nat;
  bid_bidder: address;
  bid_data_type  : option<bytes>;
  bid_data       : option<bytes>;
}

record auction_record {
  auction_sell_asset_contract : address;
  auction_sell_asset_token_id : nat;
  auction_sell_asset_amount: nat;
  auction_buy_asset_type : asset_type;
  auction_buy_asset : bytes;
  auction_last_bid: option<bid>;
  auction_seller: address;
  auction_start_time: date;
  auction_end_time: date;
  auction_minimal_price: nat;
  auction_buy_out_price: nat;
  auction_minimal_step: nat;
  auction_payouts : list<part>;
  auction_origin_fees : list<part>;
  auction_data_type  : option<bytes>;
  auction_data       : option<bytes>;
}

record auction_args {
  auction_args_sell_asset_contract : address;
  auction_args_sell_asset_token_id : nat;
  auction_args_sell_asset_amount: nat;
  auction_args_buy_asset_type : asset_type;
  auction_args_buy_asset : bytes;
  auction_args_seller: address;
  auction_args_start_time: option<date>;
  auction_args_duration: duration;
  auction_args_minimal_price: nat;
  auction_args_buy_out_price: nat;
  auction_args_minimal_step: nat;
  auction_args_payouts : list<part>;
  auction_args_origin_fees : list<part>;
  auction_args_data_type  : option<bytes>;
  auction_args_data       : option<bytes>;
}

//----------------------------------------------------------------------------
// Auction entries
//----------------------------------------------------------------------------

entry start_auction(
    sa_auction: auction_args
) {
    require{
        r_sa1: sa_auction.auction_args_buy_asset_type = FA2
            or
            sa_auction.auction_args_buy_asset_type = FA12
            or
            sa_auction.auction_args_buy_asset_type = XTZ;
        r_sa2: sa_auction.auction_args_duration > extension_duration;
        r_sa3: sa_auction.auction_args_duration < max_duration;
        r_sa4: sa_auction.auction_args_buy_out_price > sa_auction.auction_args_minimal_price;
        r_sa5: sa_auction.auction_args_minimal_price > 0;
        r_sa6: sa_auction.auction_args_minimal_step > 0;
        r_sa7: sa_auction.auction_args_seller = caller;
        r_sa8: sa_auction.auction_args_sell_asset_amount > 0;
    }
    effect {
        dorequire(
          auction_exists(
            sa_auction.auction_args_sell_asset_contract,
            sa_auction.auction_args_sell_asset_token_id
            ) = false, AUCTION_ALREADY_EXISTS);

        match sa_auction.auction_args_buy_asset_type with
        | FA2 -> (
          match unpack<FA2_asset>(sa_auction.auction_args_buy_asset) with
          | some(buyAsset) -> ()
          | none -> fail(CANT_UNPACK_FA2_BUY_ASSET)
          end
        )
        | FA12 -> (
          match unpack<FA12_asset>(sa_auction.auction_args_buy_asset) with
          | some(buyAsset) -> ()
          | none -> fail(CANT_UNPACK_FA12_BUY_ASSET)
          end
        )
        | XTZ -> (
          if(sa_auction.auction_args_buy_asset <> 0x) then (
            fail(WRONG_BUY_ASSET_PAYLOAD)
          )
        )
        end;

        var start_time: date = now;
        var end_time: date = now;
        if (sa_auction.auction_args_start_time <> none<date>) then (
            start_time := opt_get(sa_auction.auction_args_start_time);
            dorequire(start_time >= now, AUCTION_START_DATE_IN_THE_PAST);
            end_time := start_time + sa_auction.auction_args_duration;
        ) else (
            start_time := now;
            end_time := now + sa_auction.auction_args_duration;
        );

        var storage_auction: auction_record = {
            auction_sell_asset_contract = sa_auction.auction_args_sell_asset_contract;
            auction_sell_asset_token_id = sa_auction.auction_args_sell_asset_token_id;
            auction_sell_asset_amount = sa_auction.auction_args_sell_asset_amount;
            auction_buy_asset = sa_auction.auction_args_buy_asset;
            auction_buy_asset_type = sa_auction.auction_args_buy_asset_type;
            auction_last_bid = none;
            auction_seller = sa_auction.auction_args_seller;
            auction_start_time = start_time;
            auction_end_time = end_time;
            auction_minimal_price = sa_auction.auction_args_minimal_price;
            auction_buy_out_price = sa_auction.auction_args_buy_out_price;
            auction_minimal_step = sa_auction.auction_args_minimal_step;
            auction_payouts = sa_auction.auction_args_payouts;
            auction_origin_fees = sa_auction.auction_args_origin_fees;
            auction_data_type = sa_auction.auction_args_data_type;
            auction_data = sa_auction.auction_args_data
        };

        transfer 0tz to auction_storage call set_auction<auction_record>(storage_auction);
        transfer 0tz to transfer_manager call process_transfer<process_transfer_param>({
          ptp_asset_type = FA2;
          ptp_asset = pack({
            fa2_asset_contract = sa_auction.auction_args_sell_asset_contract;
            fa2_asset_token_id = sa_auction.auction_args_sell_asset_token_id
            });
          ptp_amount = sa_auction.auction_args_sell_asset_amount;
          ptp_origin = sa_auction.auction_args_seller;
          ptp_destination = auction_storage
        });
    }
}

entry put_bid(pb_asset_contract: address, pb_asset_id: nat, pb_bid: bid){
    require {
        r_pb0: pb_bid.bid_amount > 0;
        r_pb1: pb_bid.bid_bidder = caller;
    }
    effect {
      var auction = require_some(get_auction_record(pb_asset_contract, pb_asset_id), MISSING_AUCTION);
      var is_xtz = (auction.auction_buy_asset_type = XTZ);
      var previous_bid = auction.auction_last_bid;
      var is_buyout = auction.auction_buy_out_price > 0 and pb_bid.bid_amount >= auction.auction_buy_out_price;
      var total_amount = process_total_amount(pb_bid.bid_amount, protocol_fee, pb_bid.bid_origin_fees);
      var buy_asset_contract: option<address> = none;
      var buy_asset_token_id: option<nat> = none;

      dorequire(auction.auction_start_time < now, AUCTION_NOT_IN_PROGRESS);
      dorequire(auction.auction_end_time > now, AUCTION_FINISHED);

      match auction.auction_buy_asset_type with
      | FA2 -> (
        match unpack<FA2_asset>(auction.auction_buy_asset) with
        | some(buyAsset) -> (
            buy_asset_contract := some(buyAsset.fa2_asset_contract);
            buy_asset_token_id := some(buyAsset.fa2_asset_token_id);
          )
        | none -> fail(CANT_UNPACK_FA2_BUY_ASSET)
        end
      )
      | FA12 -> (
        match unpack<FA12_asset>(auction.auction_buy_asset) with
        | some(buyAsset) -> (
            buy_asset_contract := some(buyAsset.fa12_asset_contract);
        )
        | none -> fail(CANT_UNPACK_FA12_BUY_ASSET)
        end
      )
      | XTZ -> ()
      end;

      if(is_xtz) then (
        dorequire(transferred = (total_amount * 1utz), AUCTION_BID_AMOUNT_MISMATCH);
      );

      if(isnone(previous_bid)) then (
        dorequire(auction.auction_minimal_price <= pb_bid.bid_amount, AUCTION_BID_TOO_LOW);
        dorequire(auction.auction_minimal_step <= pb_bid.bid_amount, AUCTION_BID_TOO_LOW);
      ) else (
        var last_bid = opt_get(previous_bid);
        dorequire(last_bid.bid_amount < pb_bid.bid_amount, AUCTION_BID_TOO_LOW);
        dorequire(auction.auction_minimal_step <= pb_bid.bid_amount - last_bid.bid_amount, AUCTION_BID_TOO_LOW);
        dorequire(last_bid.bid_bidder <> pb_bid.bid_bidder, AUCTION_BID_ALREADY_EXISTS);
        var last_bid_total_amount = process_total_amount(last_bid.bid_amount, protocol_fee, last_bid.bid_origin_fees);
        transfer 0tz to auction_storage call process_transfer<process_transfer_param>({
            ptp_asset_type = auction.auction_buy_asset_type;
            ptp_asset = auction.auction_buy_asset;
            ptp_amount = last_bid_total_amount;
            ptp_origin = auction_storage;
            ptp_destination = last_bid.bid_bidder
          }
        );
      );

      if(is_buyout = true) then (
        //do transfers and manage fees
        transfer 0tz to selfaddress call buyout_auction<auction_record * bid>((auction, pb_bid))
      ) else (
        if(is_xtz) then (
          transfer transferred to auction_storage
        ) else (
          transfer 0tz to transfer_manager call process_transfer<process_transfer_param>(
            {
              ptp_asset_type = auction.auction_buy_asset_type;
              ptp_asset = auction.auction_buy_asset;
              ptp_amount = total_amount;
              ptp_origin = pb_bid.bid_bidder;
              ptp_destination = auction_storage
            }
          );
        );


        if(auction.auction_end_time - now < extension_duration) then (
          auction.auction_end_time := now + extension_duration;
        );
        auction.auction_last_bid := some(pb_bid);
        transfer 0tz to auction_storage call update_auction<auction_record>(auction)
      );
    }
}


entry buyout_auction(ba_auction: auction_record, ba_bid: bid) {
    called by selfaddress
    effect {

      dorequire(ba_auction.auction_start_time < now, AUCTION_NOT_IN_PROGRESS);
      dorequire(ba_auction.auction_end_time > now, AUCTION_FINISHED);

      transfer transferred to transfer_manager call manage_buyout_transfers<nat * nat * address * address * address * nat * fees * fees * asset_type * bytes * address * nat>(
         (
            ba_bid.bid_amount,
            ba_auction.auction_sell_asset_amount,
            auction_storage,
            ba_auction.auction_seller,
            ba_bid.bid_bidder,
            protocol_fee,
            { origin_fees = ba_bid.bid_origin_fees; payouts = ba_bid.bid_payouts},
            { origin_fees = ba_auction.auction_origin_fees; payouts = ba_auction.auction_payouts},
            ba_auction.auction_buy_asset_type,
            ba_auction.auction_buy_asset,
            ba_auction.auction_sell_asset_contract,
            ba_auction.auction_sell_asset_token_id
         )
      );

      transfer 0tz to auction_storage call remove_auction<address * nat>((ba_auction.auction_sell_asset_contract, ba_auction.auction_sell_asset_token_id));
    }
}


entry finish_auction(fa_asset_contract: address, fa_asset_id: nat){
    effect {
      var auction = require_some(get_auction_record(fa_asset_contract, fa_asset_id), MISSING_AUCTION);

      dorequire(auction.auction_start_time < auction.auction_end_time < now, AUCTION_NOT_FINISHABLE);

      var last_bid = require_some(auction.auction_last_bid, NO_BID_FOR_AUCTION);
  
      transfer 0tz to transfer_manager call manage_transfers<nat * nat * address * address * address * nat * fees * fees * asset_type * bytes * address * nat * address>(
         (
            last_bid.bid_amount,
            auction.auction_sell_asset_amount,
            auction_storage,
            auction.auction_seller,
            last_bid.bid_bidder,
            protocol_fee,
            { origin_fees = last_bid.bid_origin_fees; payouts = last_bid.bid_payouts},
            { origin_fees = auction.auction_origin_fees; payouts = auction.auction_payouts},
            auction.auction_buy_asset_type,
            auction.auction_buy_asset,
            auction.auction_sell_asset_contract,
            auction.auction_sell_asset_token_id,
            auction_storage
         )
      );
      transfer 0tz to auction_storage call remove_auction<address * nat>((fa_asset_contract, fa_asset_id))

    }
}

entry cancel_auction(ca_asset_contract: address, ca_asset_id: nat){
    effect {
      var auction = require_some(get_auction_record(ca_asset_contract, ca_asset_id), MISSING_AUCTION);

      dorequire(isnone(auction.auction_last_bid), AUCTION_WITH_BID_NON_CANCELLABLE);
      dorequire(auction.auction_seller = caller, ONLY_SELLER_CAN_CANCEL_AUCTION);
      dorequire(auction.auction_end_time > now, FINISHED_AUCTION_NON_CANCELLABLE);

      transfer 0tz to auction_storage call process_transfer<process_transfer_param>({
        ptp_asset_type = FA2;
        ptp_asset = auction.auction_buy_asset;
        ptp_amount = auction.auction_sell_asset_amount;
        ptp_origin = auction_storage;
        ptp_destination = auction.auction_seller
      });
      transfer 0tz to auction_storage call remove_auction<address * nat>((ca_asset_contract, ca_asset_id))
    }
}

function auction_exists(ae_asset_contract: address, ae_asset_id: nat) : bool {
    return match callview<bool>(
        auction_storage,
        "auction_exists",
        (
            ae_asset_contract,
            ae_asset_id
        )
    )
    with
        | some(v) -> v
        | none -> false
    end
}

function get_auction_record(gar_asset_contract: address, gar_asset_id: nat) : option<auction_record> {
    return opt_get(callview<option<auction_record>>(
        auction_storage,
        "get_auction",
        (
            gar_asset_contract,
            gar_asset_id
        )
    ))
}

function bp(bp_value : nat, bp_op_value : nat) : nat {
  return abs(floor(bp_value * bp_op_value / 10000))
}

function process_total_amount(cta_amount: nat, cta_fees: nat, cta_order_origin_fees: list<part>) : nat {
 var total = cta_amount + bp(cta_amount, cta_fees);
  for item in cta_order_origin_fees do
    total += bp(cta_amount, item.part_value)
  done;
  return total
}

entry process_transfer(pt_transfer: process_transfer_param){
  called by selfaddress
  effect {
    match pt_transfer.ptp_asset_type with
    | FA2  -> (
      match unpack<FA2_asset>(pt_transfer.ptp_asset) with
      | some(buyAsset) -> (
          transfer 0tz to buyAsset.fa2_asset_contract call %transfer<list<address * list<transfer_param>>>(
            [
                (
                    pt_transfer.ptp_origin,
                    [
                        {
                            destination_address = pt_transfer.ptp_destination;
                            token_id = buyAsset.fa2_asset_token_id;
                            token_amount = pt_transfer.ptp_amount
                        }
                    ]
                )
            ]
          )
        )
      | none -> fail(CANT_UNPACK_FA2_BUY_ASSET)
      end;
    )
    | FA12 -> (
      match unpack<FA12_asset>(pt_transfer.ptp_asset) with
        | some(buyAsset) -> (
            transfer 0tz to buyAsset.fa12_asset_contract call %transfer<address * address * nat>((pt_transfer.ptp_origin, pt_transfer.ptp_destination, pt_transfer.ptp_amount))
        )
        | none -> fail(CANT_UNPACK_FA12_BUY_ASSET)
        end
      )
    | XTZ -> (
          transfer (pt_transfer.ptp_amount*1utz) to pt_transfer.ptp_destination;
      )
    end;
  }
}

entry default() {}