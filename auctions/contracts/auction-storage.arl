archetype auction_storage(
  owner: address
)
with metadata ""

constant MISSING_AUCTION_CONTRACT: string = "MISSING_AUCTION_CONTRACT"
constant MISSING_TRANSFER_MANAGER: string = "MISSING_TRANSFER_MANAGER"
constant MISSING_AUCTION: string = "MISSING_AUCTION"
constant CANT_UNPACK_FA2_BUY_ASSET: string = "CANT_UNPACK_FA2_BUY_ASSET"
constant CANT_UNPACK_FA12_BUY_ASSET: string = "CANT_UNPACK_FA12_BUY_ASSET"

enum asset_type =
| XTZ
| FA12
| FA2

record FA2_asset {
  fa2_asset_contract : address;
  fa2_asset_token_id: nat;
}

record FA12_asset {
  fa12_asset_contract : address;
}

record part {
  part_account : address;
  part_value   : nat;
}

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

//----------------------------------------------------------------------------
// Owner role transfer
//----------------------------------------------------------------------------

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  called by opt_get(owner_candidate)
  effect {
    owner := opt_get(owner_candidate);
    owner_candidate := none
  }
}

//----------------------------------------------------------------------------
// Admin
//----------------------------------------------------------------------------
entry set_auction_contract(sac_contract : address) {
  called by owner
  effect {
    auction_contract := some(sac_contract);
  }
}

entry set_transfer_manager(stm_contract : address) {
  called by owner
  effect {
    transfer_manager := some(stm_contract);
  }
}

//----------------------------------------------------------------------------
// Auction
//----------------------------------------------------------------------------
variable auction_contract : option<address> = none
variable transfer_manager : option<address> = none

record bid {
  bid_payouts : list<part>;
  bid_origin_fees : list<part>;
  bid_amount : nat;
  bid_bidder: address;
  bid_data_type  : option<bytes>;
  bid_data       : option<bytes>;
}

record auction_record {
  auction_sell_asset_contract : address;
  auction_sell_asset_token_id : nat;
  auction_sell_asset_amount: nat;
  auction_buy_asset_type : asset_type;
  auction_buy_asset : bytes;
  auction_last_bid: option<bid>;
  auction_seller: address;
  auction_start_time: date;
  auction_end_time: date;
  auction_minimal_price: nat;
  auction_buy_out_price: nat;
  auction_minimal_step: nat;
  auction_payouts : list<part>;
  auction_origin_fees : list<part>;
  auction_data_type  : option<bytes>;
  auction_data       : option<bytes>;
}
asset auctions identified by auction_asset auction_asset_id to big_map {
  auction_asset : address;
  auction_asset_id: nat;
  auction : auction_record;
}

record process_transfer_param {
  ptp_asset_type: asset_type;
  ptp_asset: bytes;
  ptp_amount: nat;
  ptp_origin: address;
  ptp_destination: address;
}

record transfer_param {
  destination_address: address;
  token_id: nat;
  token_amount: nat
} as ((%to, (token_id, amount)))

entry set_auction(sa_auction : auction_record) {
  called by require_some(auction_contract, MISSING_AUCTION_CONTRACT)
  effect {
    auctions.add({auction_asset = sa_auction.auction_sell_asset_contract; auction_asset_id = sa_auction.auction_sell_asset_token_id; auction = sa_auction});
  }
}

entry update_auction(ua_auction: auction_record) {
  called by require_some(auction_contract, MISSING_AUCTION_CONTRACT)
  effect {
    //TODO: add checks for fields that should not be updated
    auctions.addupdate(
      (
        ua_auction.auction_sell_asset_contract,
        ua_auction.auction_sell_asset_token_id
      ),
      {
        auction = ua_auction
      }
    );
  }
}

entry remove_auction(ra_asset : address, ra_asset_id : nat) {
  called by require_some(auction_contract, MISSING_AUCTION_CONTRACT)
  effect {
    auctions.remove((ra_asset, ra_asset_id));
  }
}

view auction_exists(ae_asset : address, ae_asset_id : nat) : bool {
  return auctions.contains((ae_asset, ae_asset_id))
}
view get_auction(ga_asset : address, ga_asset_id : nat) : option<auction_record> {

  if(auctions.contains((ga_asset, ga_asset_id))) then (
    return some(auctions[(ga_asset, ga_asset_id)].auction);
   ) else (
    return none;
   )
}

entry process_transfer(pt_transfer: process_transfer_param){
  called by require_some(auction_contract, MISSING_AUCTION_CONTRACT) or require_some(transfer_manager, MISSING_TRANSFER_MANAGER)
  effect {
    match pt_transfer.ptp_asset_type with
    | FA2  -> (
      match unpack<FA2_asset>(pt_transfer.ptp_asset) with
      | some(buyAsset) -> (
          transfer 0tz to buyAsset.fa2_asset_contract call %transfer<list<address * list<transfer_param>>>(
            [
                (
                    pt_transfer.ptp_origin,
                    [
                        {
                            destination_address = pt_transfer.ptp_destination;
                            token_id = buyAsset.fa2_asset_token_id;
                            token_amount = pt_transfer.ptp_amount
                        }
                    ]
                )
            ]
          )
        )
      | none -> fail(CANT_UNPACK_FA2_BUY_ASSET)
      end;
    )
    | FA12 -> (
      match unpack<FA12_asset>(pt_transfer.ptp_asset) with
        | some(buyAsset) -> (
            transfer 0tz to buyAsset.fa12_asset_contract call %transfer<address * address * nat>((pt_transfer.ptp_origin, pt_transfer.ptp_destination, pt_transfer.ptp_amount))
        )
        | none -> fail(CANT_UNPACK_FA12_BUY_ASSET)
        end
      )
    | XTZ -> (
          transfer (pt_transfer.ptp_amount*1utz) to pt_transfer.ptp_destination;
      )
    end;
  }
}

entry process_transfers(pt_transfers: list<process_transfer_param>){
  called by require_some(auction_contract, MISSING_AUCTION_CONTRACT) or require_some(transfer_manager, MISSING_TRANSFER_MANAGER)
  effect {
    for pt_transfer in pt_transfers do
      match pt_transfer.ptp_asset_type with
      | FA2  -> (
        match unpack<FA2_asset>(pt_transfer.ptp_asset) with
        | some(buyAsset) -> (
            transfer 0tz to buyAsset.fa2_asset_contract call %transfer<list<address * list<transfer_param>>>(
              [
                  (
                      pt_transfer.ptp_origin,
                      [
                          {
                              destination_address = pt_transfer.ptp_destination;
                              token_id = buyAsset.fa2_asset_token_id;
                              token_amount = pt_transfer.ptp_amount
                          }
                      ]
                  )
              ]
            )
          )
        | none -> fail(CANT_UNPACK_FA2_BUY_ASSET)
        end;
      )
      | FA12 -> (
        match unpack<FA12_asset>(pt_transfer.ptp_asset) with
          | some(buyAsset) -> (
              transfer 0tz to buyAsset.fa12_asset_contract call %transfer<address * address * nat>((pt_transfer.ptp_origin, pt_transfer.ptp_destination, pt_transfer.ptp_amount))
          )
          | none -> fail(CANT_UNPACK_FA12_BUY_ASSET)
          end
        )
      | XTZ -> (
            transfer (pt_transfer.ptp_amount*1utz) to pt_transfer.ptp_destination;
        )
      end;
    done
  }
}


entry default() {}