# (Pair owner (Pair None (Pair { } (Pair { } (Pair { } None)))))
{
  storage (pair (address %owner) (pair (option %owner_candidate address) (pair (map %fill bytes nat) (pair (set %matcher address) (pair (map %asset_class_matcher nat address) (option %res_matchAssetTypes (pair (nat %assetClass) (bytes %assetData))))))));
  parameter (or (or (or (address %transferOwnership) (unit %claimOwnership)) (or (pair %setAssetMatcher (nat %k) (address %v)) (pair %cancel (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))))) (or (or (pair %doTransfers (pair %makeMatch (nat %assetClass) (bytes %assetData)) (pair (pair %takeMatch (nat %assetClass) (bytes %assetData)) (pair (pair %ifill (nat %fr_makeValue) (nat %fr_takeValue)) (pair (pair %leftOrder (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (pair %rightOrder (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))))))) (pair %matchAndTransfer (pair %orderLeft (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (pair (pair %orderRight (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (pair (option %imakeMatch (pair (nat %assetClass) (bytes %assetData))) (option %itakeMatch (pair (nat %assetClass) (bytes %assetData))))))) (or (pair %matchOrders (pair %orderLeft (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (pair (signature %signatureLeft) (pair (pair %orderRight (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (signature %signatureRight)))) (pair %test_matchAssetTypes (pair %leftAssetType (nat %assetClass) (bytes %assetData)) (pair %rightAssetType (nat %assetClass) (bytes %assetData))))));
  code { LAMBDA
           (pair (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data)))))))))
           bytes
           { PUSH unit Unit;
             NIL bytes;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             CDR;
             CDR;
             CDR;
             CAR;
             PACK;
             CONS;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             CDR;
             CDR;
             CAR;
             CAR;
             PACK;
             KECCAK;
             CONS;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             CAR;
             CAR;
             PACK;
             KECCAK;
             CONS;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             PACK;
             CONS;
             CONCAT;
             KECCAK;
             SWAP;
             DROP;
             DUG 1;
             DROP };
         LAMBDA
           (option timestamp)
           bool
           { PUSH unit Unit;
             DIG 1;
             DUP;
             DUG 2;
             IF_NONE
               { PUSH bool True }
               { NOW;
                 DIG 1;
                 DUP;
                 DUG 2;
                 COMPARE;
                 LT;
                 SWAP;
                 DROP };
             SWAP;
             DROP;
             DUG 1;
             DROP };
         LAMBDA
           (option key)
           bool
           { PUSH unit Unit;
             DIG 1;
             DUP;
             DUG 2;
             IF_NONE
               { PUSH bool False;
                 SWAP;
                 DROP }
               { SENDER;
                 DIG 1;
                 DUP;
                 DUG 2;
                 HASH_KEY;
                 IMPLICIT_ACCOUNT;
                 ADDRESS;
                 COMPARE;
                 EQ;
                 DIP { DIG 1; DROP };
                 DUG 1;
                 DROP };
             DUG 1;
             DROP };
         LAMBDA
           (pair (pair (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (pair signature (lambda (option timestamp) bool)))
           bool
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 1;
             DUP;
             DUG 2;
             DIG 4;
             DUP;
             DUG 5;
             CDR;
             CDR;
             CDR;
             CDR;
             CDR;
             CAR;
             EXEC;
             NOT;
             IF
               { PUSH string "Order start validation failed";
                 FAILWITH }
               {  };
             DIG 1;
             DUP;
             DUG 2;
             DIG 4;
             DUP;
             DUG 5;
             CDR;
             CDR;
             CDR;
             CDR;
             CDR;
             CDR;
             CAR;
             EXEC;
             NOT;
             IF
               { PUSH string "Order end validation failed";
                 FAILWITH }
               {  };
             PUSH bool True;
             SWAP;
             DROP;
             DUG 3;
             DROP 3 };
         LAMBDA
           (pair (pair (nat %assetClass) (bytes %assetData)) (pair (nat %assetClass) (bytes %assetData)))
           (option (pair (nat %assetClass) (bytes %assetData)))
           { UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             KECCAK;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             KECCAK;
             DUP;
             DIG 2;
             DUP;
             DUG 3;
             COMPARE;
             EQ;
             IF
               { DIG 4;
                 DUP;
                 DUG 5;
                 SOME;
                 DIP { DIG 2; DROP };
                 DUG 2 }
               { NONE (pair nat bytes);
                 DIP { DIG 2; DROP };
                 DUG 2 };
             DROP 2;
             DUG 2;
             DROP 2 };
         LAMBDA
           (pair (pair (nat %assetClass) (bytes %assetData)) (pair (pair (nat %assetClass) (bytes %assetData)) (lambda (pair (pair (nat %assetClass) (bytes %assetData)) (pair (nat %assetClass) (bytes %assetData))) (option (pair (nat %assetClass) (bytes %assetData))))))
           (option (pair (nat %assetClass) (bytes %assetData)))
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 3;
             DUP;
             DUG 4;
             CAR;
             DIG 3;
             DUP;
             DUG 4;
             CAR;
             DUP;
             DIG 2;
             DUP;
             DUG 3;
             PAIR;
             PUSH nat 0;
             PUSH nat 0;
             PAIR;
             DIG 1;
             DUP;
             DUG 2;
             COMPARE;
             EQ;
             IF
               { DIG 6;
                 DUP;
                 DUG 7;
                 SOME;
                 DIP { DIG 3; DROP };
                 DUG 3 }
               { PUSH nat 3;
                 PUSH nat 3;
                 PAIR;
                 DIG 1;
                 DUP;
                 DUG 2;
                 COMPARE;
                 EQ;
                 PUSH nat 2;
                 PUSH nat 2;
                 PAIR;
                 DIG 2;
                 DUP;
                 DUG 3;
                 COMPARE;
                 EQ;
                 PUSH nat 1;
                 PUSH nat 1;
                 PAIR;
                 DIG 3;
                 DUP;
                 DUG 4;
                 COMPARE;
                 EQ;
                 OR;
                 OR;
                 IF
                   { DIG 4;
                     DUP;
                     DUG 5;
                     DIG 6;
                     DUP;
                     DUG 7;
                     DIG 8;
                     DUP;
                     DUG 9;
                     PAIR;
                     EXEC;
                     DIP { DIG 3; DROP };
                     DUG 3 }
                   { NONE (pair nat bytes);
                     DIP { DIG 3; DROP };
                     DUG 3 } };
             DROP 3;
             DUG 3;
             DROP 3 };
         LAMBDA
           (pair (map bytes nat) (pair (pair (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) bytes))
           nat
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             PUSH nat 0;
             DIG 4;
             DUP;
             DUG 5;
             DIG 3;
             DUP;
             DUG 4;
             MEM;
             PUSH nat 0;
             DIG 5;
             DUP;
             DUG 6;
             CDR;
             CDR;
             CDR;
             CDR;
             CAR;
             COMPARE;
             NEQ;
             AND;
             IF
               { DIG 4;
                 DUP;
                 DUG 5;
                 DIG 3;
                 DUP;
                 DUG 4;
                 GET;
                 IF_NONE
                   { PUSH string "NotFound";
                     FAILWITH }
                   {  };
                 SWAP;
                 DROP }
               {  };
             DUP;
             DIP { DIG 1; DROP };
             DUG 1;
             DROP;
             DUG 3;
             DROP 3 };
         LAMBDA
           (pair nat (pair nat nat))
           nat
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 1;
             DUP;
             DUG 2;
             DIG 4;
             DUP;
             DUG 5;
             MUL;
             DIG 3;
             DUP;
             DUG 4;
             DIG 1;
             DUP;
             DUG 2;
             EDIV;
             IF_NONE
               { PUSH string "division by zero";
                 FAILWITH }
               { PUSH nat 0;
                 DIG 2;
                 DUP;
                 DUG 3;
                 COMPARE;
                 NEQ;
                 IF
                   { DIG 1;
                     DUP;
                     DUG 2;
                     PUSH nat 1000;
                     DIG 2;
                     DUP;
                     DUG 3;
                     CDR;
                     MUL;
                     COMPARE;
                     GE;
                     IF
                       { PUSH string "rounding error";
                         FAILWITH }
                       {  } }
                   {  };
                 DUP;
                 CAR;
                 DIP { DIG 2; DROP };
                 DUG 2;
                 DROP };
             DROP;
             DUG 3;
             DROP 3 };
         LAMBDA
           (pair nat (pair nat nat))
           nat
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             PUSH nat 0;
             DIG 3;
             DUP;
             DUG 4;
             COMPARE;
             EQ;
             IF
               { PUSH string "division by zero";
                 FAILWITH }
               {  };
             PUSH nat 0;
             DIG 4;
             DUP;
             DUG 5;
             COMPARE;
             NEQ;
             PUSH nat 0;
             DIG 3;
             DUP;
             DUG 4;
             COMPARE;
             NEQ;
             AND;
             IF
               { DIG 2;
                 DUP;
                 DUG 3;
                 INT;
                 DIG 4;
                 DUP;
                 DUG 5;
                 DIG 3;
                 DUP;
                 DUG 4;
                 MUL;
                 INT;
                 EDIV;
                 IF_NONE
                   { PUSH string "DivByZero";
                     FAILWITH }
                   { DUP;
                     CDR;
                     SWAP;
                     DROP };
                 DIG 3;
                 DUP;
                 DUG 4;
                 INT;
                 DIG 1;
                 DUP;
                 DUG 2;
                 DIG 5;
                 DUP;
                 DUG 6;
                 PAIR;
                 UNPAIR;
                 SUB;
                 DUP;
                 PUSH int 0;
                 COMPARE;
                 GT;
                 IF
                   { PUSH string "NegResult";
                     FAILWITH }
                   {  };
                 ABS;
                 INT;
                 EDIV;
                 IF_NONE
                   { PUSH string "DivByZero";
                     FAILWITH }
                   { DUP;
                     CDR;
                     SWAP;
                     DROP };
                 SWAP;
                 DROP;
                 DIG 2;
                 DUP;
                 DUG 3;
                 DIG 5;
                 DUP;
                 DUG 6;
                 MUL;
                 PUSH nat 1000;
                 DIG 2;
                 DUP;
                 DUG 3;
                 MUL;
                 COMPARE;
                 GE;
                 IF
                   { PUSH string "rounding error";
                     FAILWITH }
                   {  };
                 DROP }
               {  };
             PUSH nat 1;
             DIG 3;
             DUP;
             DUG 4;
             INT;
             PAIR;
             PUSH nat 1;
             PUSH nat 1;
             DIG 5;
             DUP;
             DUG 6;
             PAIR;
             UNPAIR;
             SUB;
             DUP;
             PUSH int 0;
             COMPARE;
             GT;
             IF
               { PUSH string "NegResult";
                 FAILWITH }
               {  };
             ABS;
             DIG 4;
             DUP;
             DUG 5;
             DIG 7;
             DUP;
             DUG 8;
             MUL;
             ADD;
             INT;
             PAIR;
             PAIR;
             UNPAIR;
             DIP { UNPAIR };
             UNPAIR;
             DIG 3;
             DUP;
             DIG 3;
             DUP;
             DUG 4;
             MUL;
             PUSH nat 0;
             COMPARE;
             EQ;
             IF
               { PUSH string "DivByZero";
                 FAILWITH }
               {  };
             PUSH int 0;
             DIG 4;
             DUP;
             DUG 5;
             COMPARE;
             GE;
             IF
               { INT }
               { NEG };
             MUL;
             DIP { MUL; ABS };
             PAIR;
             UNPAIR;
             EDIV;
             IF_NONE
               { PUSH string "DivByZero";
                 FAILWITH }
               { CAR };
             ABS;
             SWAP;
             DROP;
             DUG 3;
             DROP 3 };
         LAMBDA
           (pair (pair (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (pair nat (lambda (pair nat (pair nat nat)) nat)))
           (pair nat nat)
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 2;
             DUP;
             DUG 3;
             DIG 4;
             DUP;
             DUG 5;
             CDR;
             CDR;
             CDR;
             CAR;
             CDR;
             PAIR;
             UNPAIR;
             SUB;
             DUP;
             PUSH int 0;
             COMPARE;
             GT;
             IF
               { PUSH string "NegResult";
                 FAILWITH }
               {  };
             ABS;
             DIG 2;
             DUP;
             DUG 3;
             DIG 1;
             DUP;
             DUG 2;
             DIG 6;
             DUP;
             DUG 7;
             CDR;
             CDR;
             CDR;
             CAR;
             CDR;
             PAIR;
             DIG 6;
             DUP;
             DUG 7;
             CDR;
             CAR;
             CDR;
             PAIR;
             EXEC;
             DUP;
             DIG 2;
             DUP;
             DUG 3;
             PAIR;
             DIP { DIG 2; DROP };
             DUG 2;
             DROP 2;
             DUG 3;
             DROP 3 };
         LAMBDA
           (pair nat (pair nat (pair nat (pair nat (lambda (pair nat (pair nat nat)) nat)))))
           (pair (nat %fr_makeValue) (nat %fr_takeValue))
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 1;
             DUP;
             DUG 2;
             DIG 3;
             DUP;
             DUG 4;
             DIG 5;
             DUP;
             DUG 6;
             PAIR;
             DIG 6;
             DUP;
             DUG 7;
             PAIR;
             EXEC;
             DIG 6;
             DUP;
             DUG 7;
             DIG 1;
             DUP;
             DUG 2;
             COMPARE;
             LE;
             NOT;
             IF
               { PUSH string "fillLeft: unable to fill";
                 FAILWITH }
               {  };
             DIG 5;
             DUP;
             DUG 6;
             DIG 7;
             DUP;
             DUG 8;
             PAIR;
             DIP { DIG 1; DROP };
             DUG 1;
             DROP;
             DUG 5;
             DROP 5 };
         LAMBDA
           (pair nat (pair nat (pair nat (pair nat (lambda (pair nat (pair nat nat)) nat)))))
           (pair (nat %fr_makeValue) (nat %fr_takeValue))
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 1;
             DUP;
             DUG 2;
             DIG 5;
             DUP;
             DUG 6;
             DIG 7;
             DUP;
             DUG 8;
             PAIR;
             DIG 4;
             DUP;
             DUG 5;
             PAIR;
             EXEC;
             DIG 4;
             DUP;
             DUG 5;
             DIG 1;
             DUP;
             DUG 2;
             COMPARE;
             LE;
             NOT;
             IF
               { PUSH string "fillRight: unable to fill";
                 FAILWITH }
               {  };
             DUP;
             DIG 4;
             DUP;
             DUG 5;
             PAIR;
             DIP { DIG 1; DROP };
             DUG 1;
             DROP;
             DUG 5;
             DROP 5 };
         LAMBDA
           (pair (pair (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (pair (pair (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (pair nat (pair nat (pair (lambda (pair nat (pair nat (pair nat (pair nat (lambda (pair nat (pair nat nat)) nat))))) (pair (nat %fr_makeValue) (nat %fr_takeValue))) (pair (lambda (pair nat (pair nat (pair nat (pair nat (lambda (pair nat (pair nat nat)) nat))))) (pair (nat %fr_makeValue) (nat %fr_takeValue))) (pair (lambda (pair (pair (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (pair nat (lambda (pair nat (pair nat nat)) nat))) (pair nat nat)) (lambda (pair nat (pair nat nat)) nat))))))))
           (pair (nat %fr_makeValue) (nat %fr_takeValue))
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 2;
             DUP;
             DUG 3;
             DIG 2;
             DUP;
             DUG 3;
             DIG 8;
             DUP;
             DUG 9;
             PAIR;
             DIG 10;
             DUP;
             DUG 11;
             PAIR;
             EXEC;
             DIG 3;
             DUP;
             DUG 4;
             DIG 3;
             DUP;
             DUG 4;
             DIG 8;
             DUP;
             DUG 9;
             PAIR;
             DIG 10;
             DUP;
             DUG 11;
             PAIR;
             EXEC;
             DIG 1;
             DUP;
             DUG 2;
             CAR;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             DIG 3;
             DUP;
             DUG 4;
             CDR;
             DIG 3;
             DUP;
             DUG 4;
             DIG 1;
             DUP;
             DUG 2;
             COMPARE;
             GT;
             IF
               { DIG 9;
                 DUP;
                 DUG 10;
                 DIG 8;
                 DUP;
                 DUG 9;
                 DIG 15;
                 DUP;
                 DUG 16;
                 CDR;
                 CDR;
                 CDR;
                 CAR;
                 CDR;
                 PAIR;
                 DIG 15;
                 DUP;
                 DUG 16;
                 CDR;
                 CAR;
                 CDR;
                 PAIR;
                 DIG 4;
                 DUP;
                 DUG 5;
                 PAIR;
                 DIG 5;
                 DUP;
                 DUG 6;
                 PAIR;
                 EXEC }
               { DIG 10;
                 DUP;
                 DUG 11;
                 DIG 8;
                 DUP;
                 DUG 9;
                 DIG 2;
                 DUP;
                 DUG 3;
                 PAIR;
                 DIG 3;
                 DUP;
                 DUG 4;
                 PAIR;
                 DIG 16;
                 DUP;
                 DUG 17;
                 CDR;
                 CDR;
                 CDR;
                 CAR;
                 CDR;
                 PAIR;
                 DIG 16;
                 DUP;
                 DUG 17;
                 CDR;
                 CAR;
                 CDR;
                 PAIR;
                 EXEC };
             DIP { DIG 6; DROP };
             DUG 6;
             DROP 6;
             DUG 8;
             DROP 8 };
         LAMBDA
           (pair nat nat)
           nat
           { UNPAIR;
             SWAP;
             PUSH unit Unit;
             PUSH nat 0;
             DIG 3;
             DUP;
             DUG 4;
             COMPARE;
             EQ;
             IF
               { PUSH nat 1;
                 SWAP;
                 DROP }
               { PUSH nat 0;
                 DIG 2;
                 DUP;
                 DUG 3;
                 COMPARE;
                 EQ;
                 IF
                   { PUSH nat 2;
                     SWAP;
                     DROP }
                   { PUSH nat 1;
                     DIG 3;
                     DUP;
                     DUG 4;
                     COMPARE;
                     EQ;
                     IF
                       { PUSH nat 1;
                         SWAP;
                         DROP }
                       { PUSH nat 1;
                         DIG 2;
                         DUP;
                         DUG 3;
                         COMPARE;
                         EQ;
                         IF
                           { PUSH nat 2;
                             SWAP;
                             DROP }
                           { PUSH nat 2;
                             DIG 3;
                             DUP;
                             DUG 4;
                             COMPARE;
                             EQ;
                             IF
                               { PUSH nat 1;
                                 SWAP;
                                 DROP }
                               { PUSH nat 2;
                                 DIG 2;
                                 DUP;
                                 DUG 3;
                                 COMPARE;
                                 EQ;
                                 IF
                                   { PUSH nat 2;
                                     SWAP;
                                     DROP }
                                   { PUSH nat 0;
                                     SWAP;
                                     DROP } } } } } };
             DUG 2;
             DROP 2 };
         LAMBDA
           (pair address (pair (list %payouts (pair (address %partAccount) (nat %partValue))) (list %originFees (pair (address %partAccount) (nat %partValue)))))
           (pair (list %payouts (pair (address %partAccount) (nat %partValue))) (list %originFees (pair (address %partAccount) (nat %partValue))))
           { UNPAIR;
             SWAP;
             PUSH unit Unit;
             NIL (pair (address %partAccount) (nat %partValue));
             NIL (pair (address %partAccount) (nat %partValue));
             PUSH nat 10000;
             DIG 5;
             DUP;
             DUG 6;
             PAIR;
             CONS;
             PAIR;
             SWAP;
             DROP;
             DUG 2;
             DROP 2 };
         LAMBDA
           (pair bytes (pair (pair (option %maker key) (pair (pair %makeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (option %taker key) (pair (pair %takeAsset (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair (nat %salt) (pair (option %start timestamp) (pair (option %end timestamp) (pair (bytes %dataType) (bytes %data))))))))) (lambda (pair address (pair (list %payouts (pair (address %partAccount) (nat %partValue))) (list %originFees (pair (address %partAccount) (nat %partValue))))) (pair (list %payouts (pair (address %partAccount) (nat %partValue))) (list %originFees (pair (address %partAccount) (nat %partValue)))))))
           (pair (list %payouts (pair (address %partAccount) (nat %partValue))) (list %originFees (pair (address %partAccount) (nat %partValue))))
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             IF_NONE
               { PUSH string "NotFound";
                 FAILWITH }
               {  };
             HASH_KEY;
             IMPLICIT_ACCOUNT;
             ADDRESS;
             PUSH string "V1";
             PACK;
             KECCAK;
             DIG 4;
             DUP;
             DUG 5;
             CDR;
             CDR;
             CDR;
             CDR;
             CDR;
             CDR;
             CDR;
             CAR;
             COMPARE;
             EQ;
             IF
               { DIG 3;
                 DUP;
                 DUG 4;
                 CDR;
                 CDR;
                 CDR;
                 CDR;
                 CDR;
                 CDR;
                 CDR;
                 CAR;
                 UNPACK (pair (list (pair address nat)) (list (pair address nat)));
                 IF_NONE
                   { PUSH string "unable to unpack DataV1";
                     FAILWITH }
                   { DUP;
                     PUSH nat 0;
                     DIG 2;
                     DUP;
                     DUG 3;
                     CAR;
                     SIZE;
                     COMPARE;
                     EQ;
                     IF
                       { DIG 4;
                         DUP;
                         DUG 5;
                         DIG 2;
                         DUP;
                         DUG 3;
                         DIG 4;
                         DUP;
                         DUG 5;
                         PAIR;
                         EXEC;
                         SWAP;
                         DROP }
                       {  };
                     DIG 1;
                     DUP;
                     DUG 2;
                     DIP { DIG 3; DROP };
                     DUG 3;
                     DROP 2 } }
               { PUSH bytes 0xffffffff;
                 DIG 4;
                 DUP;
                 DUG 5;
                 CDR;
                 CDR;
                 CDR;
                 CDR;
                 CDR;
                 CDR;
                 CDR;
                 CAR;
                 COMPARE;
                 EQ;
                 IF
                   { DIG 2;
                     DUP;
                     DUG 3;
                     NIL (pair (address %partAccount) (nat %partValue));
                     NIL (pair (address %partAccount) (nat %partValue));
                     PAIR;
                     DIG 2;
                     DUP;
                     DUG 3;
                     PAIR;
                     EXEC;
                     DIP { DIG 1; DROP };
                     DUG 1 }
                   { PUSH string "Unknown Order data type";
                     FAILWITH } };
             DROP;
             DUG 3;
             DROP 3 };
         LAMBDA
           (pair nat nat)
           nat
           { UNPAIR;
             SWAP;
             PUSH unit Unit;
             PUSH nat 1;
             PUSH nat 10000;
             INT;
             PAIR;
             PUSH nat 1;
             DIG 3;
             DUP;
             DUG 4;
             DIG 5;
             DUP;
             DUG 6;
             MUL;
             INT;
             PAIR;
             PAIR;
             UNPAIR;
             DIP { UNPAIR };
             UNPAIR;
             DIG 3;
             DUP;
             DIG 3;
             DUP;
             DUG 4;
             MUL;
             PUSH nat 0;
             COMPARE;
             EQ;
             IF
               { PUSH string "DivByZero";
                 FAILWITH }
               {  };
             PUSH int 0;
             DIG 4;
             DUP;
             DUG 5;
             COMPARE;
             GE;
             IF
               { INT }
               { NEG };
             MUL;
             DIP { MUL; ABS };
             PAIR;
             UNPAIR;
             EDIV;
             IF_NONE
               { PUSH string "DivByZero";
                 FAILWITH }
               { CAR };
             ABS;
             SWAP;
             DROP;
             DUG 2;
             DROP 2 };
         LAMBDA
           (pair (pair (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair address (pair address (pair bytes bytes))))
           operation
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             DIG 3;
             DUP;
             DUG 4;
             CONTRACT unit;
             IF_NONE
               { PUSH string "NotFound";
                 FAILWITH }
               {  };
             DUP;
             PUSH mutez 0;
             PUSH unit Unit;
             TRANSFER_TOKENS;
             DUP;
             DIP { DIG 2; DROP };
             DUG 2;
             DROP 2;
             DUG 5;
             DROP 5 };
         LAMBDA
           (pair bytes (pair (pair (nat %assetClass) (bytes %assetData)) (pair nat (pair address (pair (list (pair (address %partAccount) (nat %partValue))) (pair bytes (pair (lambda (pair (pair (pair %assetType (nat %assetClass) (bytes %assetData)) (nat %assetValue)) (pair address (pair address (pair bytes bytes)))) operation) (lambda (pair nat nat) nat))))))))
           (list operation)
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             NIL operation;
             NIL (pair (address %partAccount) (nat %partValue));
             DIG 6;
             DUP;
             DUG 7;
             ITER { DIG 1;
                    DUP;
                    DUG 2;
                    DIG 1;
                    DUP;
                    DUG 2;
                    CONS;
                    DIP { DIG 1; DROP };
                    DUG 1;
                    DROP };
             IF_CONS
               { PUSH nat 0;
                 DIG 10;
                 DUP;
                 DUG 11;
                 DIG 3;
                 DUP;
                 DUG 4;
                 ITER { DIG 7;
                        DUP;
                        DUG 8;
                        DIG 1;
                        DUP;
                        DUG 2;
                        CDR;
                        DIG 14;
                        DUP;
                        DUG 15;
                        PAIR;
                        EXEC;
                        DIG 1;
                        DUP;
                        DUG 2;
                        CDR;
                        DIG 4;
                        DUP;
                        DUG 5;
                        ADD;
                        DIP { DIG 3; DROP };
                        DUG 3;
                        PUSH nat 0;
                        DIG 1;
                        DUP;
                        DUG 2;
                        COMPARE;
                        GT;
                        IF
                          { DUP;
                            DIG 3;
                            DUP;
                            DUG 4;
                            PAIR;
                            UNPAIR;
                            SUB;
                            DUP;
                            PUSH int 0;
                            COMPARE;
                            GT;
                            IF
                              { PUSH string "NegResult";
                                FAILWITH }
                              {  };
                            ABS;
                            DIP { DIG 2; DROP };
                            DUG 2;
                            DIG 6;
                            DIG 9;
                            DUP;
                            DUG 10;
                            PUSH string "PAYOUT";
                            PACK;
                            KECCAK;
                            DIG 12;
                            DUP;
                            DUG 13;
                            PAIR;
                            DIG 4;
                            DUP;
                            DUG 5;
                            CAR;
                            PAIR;
                            DIG 14;
                            DUP;
                            DUG 15;
                            PAIR;
                            DIG 3;
                            DUP;
                            DUG 4;
                            DIG 17;
                            DUP;
                            DUG 18;
                            PAIR;
                            PAIR;
                            EXEC;
                            CONS;
                            DUG 6 }
                          {  };
                        DROP 2 };
                 NIL operation;
                 DIG 5;
                 DUP;
                 DUG 6;
                 ITER { DIG 1;
                        DUP;
                        DUG 2;
                        DIG 1;
                        DUP;
                        DUG 2;
                        CONS;
                        DIP { DIG 1; DROP };
                        DUG 1;
                        DROP };
                 DIP { DIG 4; DROP };
                 DUG 4;
                 DIG 2;
                 DUP;
                 DUG 3;
                 CDR;
                 DIG 2;
                 DUP;
                 DUG 3;
                 ADD;
                 DIP { DIG 1; DROP };
                 DUG 1;
                 PUSH nat 10000;
                 DIG 2;
                 DUP;
                 DUG 3;
                 COMPARE;
                 EQ;
                 NOT;
                 IF
                   { PUSH string "Sum payouts Bps not equal 100%";
                     FAILWITH }
                   {  };
                 PUSH nat 0;
                 DIG 1;
                 DUP;
                 DUG 2;
                 COMPARE;
                 GT;
                 IF
                   {  }
                   {  };
                 DROP 4 }
               {  };
             DUP;
             DIP { DIG 1; DROP };
             DUG 1;
             DROP;
             DUG 8;
             DROP 8 };
         LAMBDA
           (pair nat (pair address (pair (pair (list %payouts (pair (address %partAccount) (nat %partValue))) (list %originFees (pair (address %partAccount) (nat %partValue)))) (pair (pair (list %payouts (pair (address %partAccount) (nat %partValue))) (list %originFees (pair (address %partAccount) (nat %partValue)))) (pair (pair (nat %assetClass) (bytes %assetData)) (pair (pair (nat %assetClass) (bytes %assetData)) bytes))))))
           (pair nat (list operation))
           { UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             UNPAIR;
             SWAP;
             PUSH unit Unit;
             NIL operation;
             PUSH nat 0;
             PAIR;
             SWAP;
             DROP;
             DUG 7;
             DROP 7 };
         NIL operation;
         DIG 21;
         UNPAIR;
         DIP { UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP; UNPAIR; SWAP };
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DIG 6;
                     DUP;
                     DUG 7;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "InvalidCaller";
                         FAILWITH }
                       {  };
                     DUP;
                     SOME;
                     DIP { DIG 5; DROP };
                     DUG 5;
                     DROP;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     DIG 1;
                     PAIR }
                   { DROP;
                     DIG 4;
                     DUP;
                     DUG 5;
                     IF_NONE
                       { PUSH string "NotFound";
                         FAILWITH }
                       {  };
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "InvalidCaller";
                         FAILWITH }
                       {  };
                     DIG 4;
                     DUP;
                     DUG 5;
                     IF_NONE
                       { PUSH string "NotFound";
                         FAILWITH }
                       {  };
                     DIP { DIG 5; DROP };
                     DUG 5;
                     NONE address;
                     DIP { DIG 4; DROP };
                     DUG 4;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     DIG 1;
                     PAIR } }
               { IF_LEFT
                   { UNPAIR;
                     SWAP;
                     DIG 7;
                     DUP;
                     DUG 8;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "InvalidCaller";
                         FAILWITH }
                       {  };
                     DIG 4;
                     DUP;
                     DUG 5;
                     DIG 1;
                     DUP;
                     DUG 2;
                     MEM;
                     IF
                       { PUSH string "KeyExists";
                         FAILWITH }
                       { DIG 4;
                         DUP;
                         DUG 5;
                         PUSH bool True;
                         DIG 2;
                         DUP;
                         DUG 3;
                         UPDATE;
                         DIP { DIG 4; DROP };
                         DUG 4 };
                     DIG 3;
                     DUP;
                     DUG 4;
                     DIG 2;
                     DUP;
                     DUG 3;
                     MEM;
                     IF
                       { PUSH string "KeyExists";
                         FAILWITH }
                       { DIG 3;
                         DUP;
                         DUG 4;
                         DIG 1;
                         DUP;
                         DUG 2;
                         SOME;
                         DIG 3;
                         DUP;
                         DUG 4;
                         UPDATE;
                         DIP { DIG 3; DROP };
                         DUG 3 };
                     DROP 2;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     DIG 1;
                     PAIR }
                   { DUP;
                     CAR;
                     IF_NONE
                       { PUSH string "NotFound";
                         FAILWITH }
                       {  };
                     HASH_KEY;
                     IMPLICIT_ACCOUNT;
                     ADDRESS;
                     SENDER;
                     COMPARE;
                     EQ;
                     NOT;
                     IF
                       { PUSH string "InvalidCaller";
                         FAILWITH }
                       {  };
                     PUSH nat 0;
                     DIG 1;
                     DUP;
                     DUG 2;
                     CDR;
                     CDR;
                     CDR;
                     CDR;
                     CAR;
                     COMPARE;
                     NEQ;
                     NOT;
                     IF
                       { PUSH string "0 salt can't be used";
                         FAILWITH }
                       {  };
                     DIG 4;
                     DUP;
                     DUG 5;
                     NONE nat;
                     DIG 29;
                     DUP;
                     DUG 30;
                     DIG 3;
                     DUP;
                     DUG 4;
                     EXEC;
                     UPDATE;
                     DIP { DIG 4; DROP };
                     DUG 4;
                     DROP;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     DIG 1;
                     PAIR } } }
           { IF_LEFT
               { IF_LEFT
                   { UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     DIG 18;
                     DUP;
                     DUG 19;
                     DIG 4;
                     DUP;
                     DUG 5;
                     CAR;
                     DIG 6;
                     DUP;
                     DUG 7;
                     CAR;
                     PAIR;
                     EXEC;
                     DIG 3;
                     DUP;
                     DUG 4;
                     CAR;
                     DIG 4;
                     DUP;
                     DUG 5;
                     CDR;
                     DIG 19;
                     DUP;
                     DUG 20;
                     DIG 21;
                     DUP;
                     DUG 22;
                     DIG 6;
                     DUP;
                     DUG 7;
                     PAIR;
                     PUSH string "V1";
                     PACK;
                     KECCAK;
                     PAIR;
                     EXEC;
                     DIG 20;
                     DUP;
                     DUG 21;
                     DIG 22;
                     DUP;
                     DUG 23;
                     DIG 6;
                     DUP;
                     DUG 7;
                     PAIR;
                     PUSH string "V1";
                     PACK;
                     KECCAK;
                     PAIR;
                     EXEC;
                     NIL operation;
                     NIL operation;
                     DIG 8;
                     DUP;
                     DUG 9;
                     CAR;
                     IF_NONE
                       { PUSH string "NotFound";
                         FAILWITH }
                       {  };
                     HASH_KEY;
                     IMPLICIT_ACCOUNT;
                     ADDRESS;
                     DIG 8;
                     DUP;
                     DUG 9;
                     CAR;
                     IF_NONE
                       { PUSH string "NotFound";
                         FAILWITH }
                       {  };
                     HASH_KEY;
                     IMPLICIT_ACCOUNT;
                     ADDRESS;
                     PUSH nat 1;
                     DIG 9;
                     DUP;
                     DUG 10;
                     COMPARE;
                     EQ;
                     IF
                       { DIG 21;
                         DUP;
                         DUG 22;
                         PUSH string "TO_TAKER";
                         PACK;
                         KECCAK;
                         DIG 14;
                         DUP;
                         DUG 15;
                         PAIR;
                         DIG 15;
                         DUP;
                         DUG 16;
                         PAIR;
                         DIG 6;
                         DUP;
                         DUG 7;
                         PAIR;
                         DIG 7;
                         DUP;
                         DUG 8;
                         PAIR;
                         DIG 3;
                         DUP;
                         DUG 4;
                         PAIR;
                         DIG 13;
                         DUP;
                         DUG 14;
                         CAR;
                         PAIR;
                         EXEC;
                         DUP;
                         CAR;
                         DIP { DIG 8; DROP };
                         DUG 8;
                         DUP;
                         CDR;
                         DIP { DIG 4; DROP };
                         DUG 4;
                         DIG 23;
                         DUP;
                         DUG 24;
                         DIG 26;
                         DUP;
                         DUG 27;
                         DIG 26;
                         DUP;
                         DUG 27;
                         PAIR;
                         PUSH string "TO_MAKER";
                         PACK;
                         KECCAK;
                         PAIR;
                         DIG 8;
                         DUP;
                         DUG 9;
                         CAR;
                         PAIR;
                         DIG 3;
                         DUP;
                         DUG 4;
                         PAIR;
                         DIG 14;
                         DUP;
                         DUG 15;
                         CDR;
                         PAIR;
                         DIG 15;
                         DUP;
                         DUG 16;
                         PAIR;
                         PUSH string "PAYOUT";
                         PACK;
                         KECCAK;
                         PAIR;
                         EXEC;
                         DIP { DIG 3; DROP };
                         DUG 3;
                         DROP }
                       { PUSH nat 2;
                         DIG 9;
                         DUP;
                         DUG 10;
                         COMPARE;
                         EQ;
                         IF
                           { DIG 21;
                             DUP;
                             DUG 22;
                             PUSH string "TO_MAKER";
                             PACK;
                             KECCAK;
                             DIG 15;
                             DUP;
                             DUG 16;
                             PAIR;
                             DIG 14;
                             DUP;
                             DUG 15;
                             PAIR;
                             DIG 7;
                             DUP;
                             DUG 8;
                             PAIR;
                             DIG 6;
                             DUP;
                             DUG 7;
                             PAIR;
                             DIG 2;
                             DUP;
                             DUG 3;
                             PAIR;
                             DIG 13;
                             DUP;
                             DUG 14;
                             CDR;
                             PAIR;
                             EXEC;
                             DUP;
                             CAR;
                             DIP { DIG 7; DROP };
                             DUG 7;
                             DUP;
                             CDR;
                             DIP { DIG 4; DROP };
                             DUG 4;
                             DIG 23;
                             DUP;
                             DUG 24;
                             DIG 26;
                             DUP;
                             DUG 27;
                             DIG 26;
                             DUP;
                             DUG 27;
                             PAIR;
                             PUSH string "TO_TAKER";
                             PACK;
                             KECCAK;
                             PAIR;
                             DIG 7;
                             DUP;
                             DUG 8;
                             CAR;
                             PAIR;
                             DIG 4;
                             DUP;
                             DUG 5;
                             PAIR;
                             DIG 14;
                             DUP;
                             DUG 15;
                             CAR;
                             PAIR;
                             DIG 16;
                             DUP;
                             DUG 17;
                             PAIR;
                             PUSH string "PAYOUT";
                             PACK;
                             KECCAK;
                             PAIR;
                             EXEC;
                             DIP { DIG 3; DROP };
                             DUG 3;
                             DROP }
                           { DIG 22;
                             DUP;
                             DUG 23;
                             DIG 25;
                             DUP;
                             DUG 26;
                             DIG 25;
                             DUP;
                             DUG 26;
                             PAIR;
                             PUSH string "TO_TAKER";
                             PACK;
                             KECCAK;
                             PAIR;
                             DIG 6;
                             DUP;
                             DUG 7;
                             CAR;
                             PAIR;
                             DIG 3;
                             DUP;
                             DUG 4;
                             PAIR;
                             DIG 13;
                             DUP;
                             DUG 14;
                             CAR;
                             PAIR;
                             DIG 15;
                             DUP;
                             DUG 16;
                             PAIR;
                             PUSH string "PAYOUT";
                             PACK;
                             KECCAK;
                             PAIR;
                             EXEC;
                             DIP { DIG 3; DROP };
                             DUG 3;
                             DIG 22;
                             DUP;
                             DUG 23;
                             DIG 25;
                             DUP;
                             DUG 26;
                             DIG 25;
                             DUP;
                             DUG 26;
                             PAIR;
                             PUSH string "TO_MAKER";
                             PACK;
                             KECCAK;
                             PAIR;
                             DIG 7;
                             DUP;
                             DUG 8;
                             CAR;
                             PAIR;
                             DIG 2;
                             DUP;
                             DUG 3;
                             PAIR;
                             DIG 13;
                             DUP;
                             DUG 14;
                             CDR;
                             PAIR;
                             DIG 14;
                             DUP;
                             DUG 15;
                             PAIR;
                             PUSH string "PAYOUT";
                             PACK;
                             KECCAK;
                             PAIR;
                             EXEC;
                             DIP { DIG 2; DROP };
                             DUG 2 } };
                     DIG 2;
                     DUP;
                     DUG 3;
                     NIL operation;
                     DIG 5;
                     DUP;
                     DUG 6;
                     ITER { DIG 1;
                            DUP;
                            DUG 2;
                            DIG 1;
                            DUP;
                            DUG 2;
                            CONS;
                            DIP { DIG 1; DROP };
                            DUG 1;
                            DROP };
                     ITER { DIG 1;
                            DUP;
                            DUG 2;
                            DIG 1;
                            DUP;
                            DUG 2;
                            CONS;
                            DIP { DIG 1; DROP };
                            DUG 1;
                            DROP };
                     DIP { DIG 20; DROP };
                     DUG 20;
                     DROP 14;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     DIG 1;
                     PAIR }
                   { UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     DIG 6;
                     DUP;
                     DUG 7;
                     SENDER;
                     MEM;
                     SELF;
                     ADDRESS;
                     SENDER;
                     COMPARE;
                     EQ;
                     OR;
                     NOT;
                     IF
                       { PUSH string "InvalidCaller";
                         FAILWITH }
                       {  };
                     DIG 1;
                     DUP;
                     DUG 2;
                     IF_NONE
                       { PUSH string "Invalid makeMatch";
                         FAILWITH }
                       {  };
                     DIG 1;
                     DUP;
                     DUG 2;
                     IF_NONE
                       { PUSH string "Invalid takeMatch";
                         FAILWITH }
                       {  };
                     DIG 32;
                     DUP;
                     DUG 33;
                     DIG 6;
                     DUP;
                     DUG 7;
                     EXEC;
                     DIG 33;
                     DUP;
                     DUG 34;
                     DIG 6;
                     DUP;
                     DUG 7;
                     EXEC;
                     DIG 28;
                     DUP;
                     DUG 29;
                     DIG 2;
                     DUP;
                     DUG 3;
                     DIG 9;
                     DUP;
                     DUG 10;
                     PAIR;
                     DIG 13;
                     DUP;
                     DUG 14;
                     PAIR;
                     EXEC;
                     DIG 29;
                     DUP;
                     DUG 30;
                     DIG 2;
                     DUP;
                     DUG 3;
                     DIG 9;
                     DUP;
                     DUG 10;
                     PAIR;
                     DIG 14;
                     DUP;
                     DUG 15;
                     PAIR;
                     EXEC;
                     DIG 24;
                     DUP;
                     DUG 25;
                     DIG 30;
                     DUP;
                     DUG 31;
                     DIG 29;
                     DUP;
                     DUG 30;
                     PAIR;
                     DIG 28;
                     DUP;
                     DUG 29;
                     PAIR;
                     DIG 27;
                     DUP;
                     DUG 28;
                     PAIR;
                     DIG 2;
                     DUP;
                     DUG 3;
                     PAIR;
                     DIG 3;
                     DUP;
                     DUG 4;
                     PAIR;
                     DIG 10;
                     DUP;
                     DUG 11;
                     PAIR;
                     DIG 11;
                     DUP;
                     DUG 12;
                     PAIR;
                     EXEC;
                     PUSH nat 0;
                     DIG 1;
                     DUP;
                     DUG 2;
                     CDR;
                     COMPARE;
                     GT;
                     NOT;
                     IF
                       { PUSH string "nothing to fill";
                         FAILWITH }
                       {  };
                     PUSH nat 0;
                     DIG 11;
                     DUP;
                     DUG 12;
                     CDR;
                     CDR;
                     CDR;
                     CDR;
                     CAR;
                     COMPARE;
                     NEQ;
                     IF
                       { DIG 14;
                         DUP;
                         DUG 15;
                         DIG 1;
                         DUP;
                         DUG 2;
                         CDR;
                         DIG 4;
                         DUP;
                         DUG 5;
                         ADD;
                         SOME;
                         DIG 6;
                         DUP;
                         DUG 7;
                         UPDATE;
                         DIP { DIG 14; DROP };
                         DUG 14 }
                       {  };
                     PUSH nat 0;
                     DIG 10;
                     DUP;
                     DUG 11;
                     CDR;
                     CDR;
                     CDR;
                     CDR;
                     CAR;
                     COMPARE;
                     NEQ;
                     IF
                       { DIG 14;
                         DUP;
                         DUG 15;
                         DIG 1;
                         DUP;
                         DUG 2;
                         CAR;
                         DIG 3;
                         DUP;
                         DUG 4;
                         ADD;
                         SOME;
                         DIG 5;
                         DUP;
                         DUG 6;
                         UPDATE;
                         DIP { DIG 14; DROP };
                         DUG 14 }
                       {  };
                     DIG 17;
                     DUP;
                     DUG 18;
                     SELF;
                     ADDRESS;
                     CONTRACT %doTransfers (pair (pair nat bytes) (pair (pair nat bytes) (pair (pair nat nat) (pair (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes)))))))) (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes))))))))))));
                     IF_NONE
                       { PUSH string "NotFound";
                         FAILWITH }
                       {  };
                     AMOUNT;
                     DIG 12;
                     DUP;
                     DUG 13;
                     DIG 14;
                     DUP;
                     DUG 15;
                     PAIR;
                     DIG 4;
                     DUP;
                     DUG 5;
                     PAIR;
                     DIG 9;
                     DUP;
                     DUG 10;
                     PAIR;
                     DIG 10;
                     DUP;
                     DUG 11;
                     PAIR;
                     TRANSFER_TOKENS;
                     CONS;
                     DIP { DIG 17; DROP };
                     DUG 17;
                     DROP 11;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     DIG 1;
                     PAIR } }
               { IF_LEFT
                   { UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     DIG 27;
                     DUP;
                     DUG 28;
                     DIG 30;
                     DUP;
                     DUG 31;
                     DIG 4;
                     DUP;
                     DUG 5;
                     PAIR;
                     DIG 5;
                     DUP;
                     DUG 6;
                     PAIR;
                     EXEC;
                     DIG 28;
                     DUP;
                     DUG 29;
                     DIG 31;
                     DUP;
                     DUG 32;
                     DIG 3;
                     DUP;
                     DUG 4;
                     PAIR;
                     DIG 4;
                     DUP;
                     DUG 5;
                     PAIR;
                     EXEC;
                     DIG 5;
                     DUP;
                     DUG 6;
                     CDR;
                     CDR;
                     CAR;
                     IF_NONE
                       { PUSH bool False }
                       { PUSH bool True;
                         SWAP;
                         DROP };
                     IF
                       { DIG 5;
                         DUP;
                         DUG 6;
                         CDR;
                         CDR;
                         CAR;
                         DIG 4;
                         DUP;
                         DUG 5;
                         CAR;
                         COMPARE;
                         EQ;
                         NOT;
                         IF
                           { PUSH string "leftOrder.taker verification failed";
                             FAILWITH }
                           {  } }
                       {  };
                     DIG 3;
                     DUP;
                     DUG 4;
                     CDR;
                     CDR;
                     CAR;
                     IF_NONE
                       { PUSH bool False }
                       { PUSH bool True;
                         SWAP;
                         DROP };
                     IF
                       { DIG 5;
                         DUP;
                         DUG 6;
                         CAR;
                         DIG 4;
                         DUP;
                         DUG 5;
                         CDR;
                         CDR;
                         CAR;
                         COMPARE;
                         EQ;
                         NOT;
                         IF
                           { PUSH string "rightOrder.taker verification failed";
                             FAILWITH }
                           {  } }
                       {  };
                     DIG 27;
                     DUP;
                     DUG 28;
                     DIG 29;
                     DUP;
                     DUG 30;
                     DIG 5;
                     DUP;
                     DUG 6;
                     CDR;
                     CDR;
                     CDR;
                     CAR;
                     CAR;
                     PAIR;
                     DIG 7;
                     DUP;
                     DUG 8;
                     CDR;
                     CAR;
                     CAR;
                     PAIR;
                     EXEC;
                     DIG 28;
                     DUP;
                     DUG 29;
                     DIG 30;
                     DUP;
                     DUG 31;
                     DIG 6;
                     DUP;
                     DUG 7;
                     CDR;
                     CAR;
                     CAR;
                     PAIR;
                     DIG 8;
                     DUP;
                     DUG 9;
                     CDR;
                     CDR;
                     CDR;
                     CAR;
                     CAR;
                     PAIR;
                     EXEC;
                     DIG 5;
                     DUP;
                     DUG 6;
                     DIG 8;
                     DUP;
                     DUG 9;
                     PAIR;
                     PACK;
                     DIG 1;
                     DUP;
                     DUG 2;
                     IF_NONE
                       { PUSH bool True }
                       { PUSH bool False;
                         SWAP;
                         DROP };
                     DIG 3;
                     DUP;
                     DUG 4;
                     IF_NONE
                       { PUSH bool True }
                       { PUSH bool False;
                         SWAP;
                         DROP };
                     OR;
                     IF
                       { DIG 10;
                         DUP;
                         DUG 11;
                         PUSH nat 0;
                         GET;
                         IF_NONE
                           { PUSH string "NotFound";
                             FAILWITH }
                           {  };
                         DIG 16;
                         DUP;
                         DUG 17;
                         DIG 1;
                         DUP;
                         DUG 2;
                         CONTRACT %matchAssets (pair (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes)))))))) (pair (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes)))))))) (contract (pair (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes)))))))) (pair (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes)))))))) (pair (option (pair nat bytes)) (option (pair nat bytes))))))));
                         IF_NONE
                           { PUSH string "NotFound";
                             FAILWITH }
                           {  };
                         AMOUNT;
                         SELF;
                         ADDRESS;
                         CONTRACT %matchAndTransfer (pair (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes)))))))) (pair (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes)))))))) (pair (option (pair nat bytes)) (option (pair nat bytes)))));
                         IF_NONE
                           { PUSH string "NotFound";
                             FAILWITH }
                           {  };
                         DIG 11;
                         DUP;
                         DUG 12;
                         PAIR;
                         DIG 13;
                         DUP;
                         DUG 14;
                         PAIR;
                         TRANSFER_TOKENS;
                         CONS;
                         DIP { DIG 16; DROP };
                         DUG 16;
                         DROP }
                       { DIG 15;
                         DUP;
                         DUG 16;
                         SELF;
                         ADDRESS;
                         CONTRACT %matchAndTransfer (pair (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes)))))))) (pair (pair (option key) (pair (pair (pair nat bytes) nat) (pair (option key) (pair (pair (pair nat bytes) nat) (pair nat (pair (option timestamp) (pair (option timestamp) (pair bytes bytes)))))))) (pair (option (pair nat bytes)) (option (pair nat bytes)))));
                         IF_NONE
                           { PUSH string "NotFound";
                             FAILWITH }
                           {  };
                         AMOUNT;
                         DIG 4;
                         DUP;
                         DUG 5;
                         DIG 6;
                         DUP;
                         DUG 7;
                         PAIR;
                         DIG 10;
                         DUP;
                         DUG 11;
                         PAIR;
                         DIG 12;
                         DUP;
                         DUG 13;
                         PAIR;
                         TRANSFER_TOKENS;
                         CONS;
                         DIP { DIG 15; DROP };
                         DUG 15 };
                     DROP 9;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     DIG 1;
                     PAIR }
                   { UNPAIR;
                     SWAP;
                     DIG 23;
                     DUP;
                     DUG 24;
                     DIG 25;
                     DUP;
                     DUG 26;
                     DIG 2;
                     DUP;
                     DUG 3;
                     PAIR;
                     DIG 3;
                     DUP;
                     DUG 4;
                     PAIR;
                     EXEC;
                     DIP { DIG 2; DROP };
                     DUG 2;
                     DROP 2;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     DIG 1;
                     PAIR } } };
         DIP { DROP 20 } };
}

