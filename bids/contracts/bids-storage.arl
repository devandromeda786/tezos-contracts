archetype bids_storage(
  owner: address
)
with metadata ""

constant MISSING_BIDS_CONTRACT: string = "MISSING_BIDS_CONTRACT"
constant MISSING_TRANSFER_MANAGER: string = "MISSING_TRANSFER_MANAGER"
constant CANT_UNPACK_FA2_BID_ASSET: string = "CANT_UNPACK_FA2_BID_ASSET"
constant CANT_UNPACK_FA12_BID_ASSET: string = "CANT_UNPACK_FA12_BID_ASSET"

enum asset_type =
| XTZ
| FA12
| FA2

record FA2_asset {
  fa2_asset_contract : address;
  fa2_asset_token_id: nat;
}

record FA12_asset {
  fa12_asset_contract : address;
}

record part {
  part_account : address;
  part_value   : nat;
}

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

//----------------------------------------------------------------------------
// Owner role transfer
//----------------------------------------------------------------------------

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  called by opt_get(owner_candidate)
  effect {
    owner := opt_get(owner_candidate);
    owner_candidate := none
  }
}

//----------------------------------------------------------------------------
// Admin
//----------------------------------------------------------------------------
entry set_bids_contract(sbc_contract : address) {
  called by owner
  effect {
    bids_contract := some(sbc_contract);
  }
}

entry set_transfer_manager(stm_contract : address) {
  called by owner
  effect {
    transfer_manager := some(stm_contract);
  }
}

//----------------------------------------------------------------------------
// Auction
//----------------------------------------------------------------------------
variable bids_contract : option<address> = none
variable transfer_manager : option<address> = none

record bid {
  bid_payouts : list<part>;
  bid_origin_fees : list<part>;
  bid_amount : nat;
  bid_asset_qty: nat;
  bid_data_type  : option<bytes>;
  bid_data       : option<bytes>;
}

asset bids identified by bid_asset_contract bid_asset_token_id bid_asset_bidder bid_type bid_asset to big_map {
  bid_asset_contract : address;
  bid_asset_token_id: nat;
  bid_asset_bidder: address;
  bid_type: asset_type;
  bid_asset : bytes;
  bid_record: bid;
}

record process_transfer_param {
  ptp_asset_type: asset_type;
  ptp_asset: bytes;
  ptp_amount: nat;
  ptp_origin: address;
  ptp_destination: address;
}

record transfer_param {
  destination_address: address;
  token_id: nat;
  token_amount: nat
} as ((%to, (token_id, amount)))

entry set_bid(
  sb_asset_contract: address,
  sb_asset_token_id: nat,
  sb_bidder: address,
  sb_bid_type: asset_type,
  sb_bid_asset: bytes,
  sb_bid : bid) {
  called by require_some(bids_contract, MISSING_BIDS_CONTRACT)
  effect {
    bids.addupdate(
      (
        sb_asset_contract,
        sb_asset_token_id,
        sb_bidder,
        sb_bid_type,
        sb_bid_asset
      ),
      {
        bid_record = sb_bid
      }
    );
  }
}

entry remove_bid(
  rb_asset_contract: address,
  rb_asset_token_id: nat,
  rb_bidder: address,
  rb_bid_type: asset_type,
  rb_bid_asset: bytes) {
  called by require_some(bids_contract, MISSING_BIDS_CONTRACT)
  effect {
    bids.remove((rb_asset_contract, rb_asset_token_id, rb_bidder, rb_bid_type, rb_bid_asset));
  }
}

view bid_exists(
  be_asset_contract: address,
  be_asset_token_id: nat,
  be_bidder: address,
  be_bid_type: asset_type,
  be_bid_asset: bytes) : bool {
  return bids.contains((be_asset_contract, be_asset_token_id, be_bidder, be_bid_type, be_bid_asset))
}

view get_bid(
  gb_asset_contract: address,
  gb_asset_token_id: nat,
  gb_bidder: address,
  gb_bid_type: asset_type,
  gb_bid_asset: bytes) : option<bid> {
  if(bids.contains((gb_asset_contract, gb_asset_token_id, gb_bidder, gb_bid_type, gb_bid_asset))) then (
    return some(bids[(gb_asset_contract, gb_asset_token_id, gb_bidder, gb_bid_type, gb_bid_asset)].bid_record);
   ) else (
    return none;
   )
}

entry process_transfer(pt_transfer: process_transfer_param){
  called by require_some(bids_contract, MISSING_BIDS_CONTRACT) or require_some(transfer_manager, MISSING_TRANSFER_MANAGER)
  effect {
    match pt_transfer.ptp_asset_type with
    | FA2  -> (
      match unpack<FA2_asset>(pt_transfer.ptp_asset) with
      | some(buyAsset) -> (
          transfer 0tz to buyAsset.fa2_asset_contract call %transfer<list<address * list<transfer_param>>>(
            [
                (
                    pt_transfer.ptp_origin,
                    [
                        {
                            destination_address = pt_transfer.ptp_destination;
                            token_id = buyAsset.fa2_asset_token_id;
                            token_amount = pt_transfer.ptp_amount
                        }
                    ]
                )
            ]
          )
        )
      | none -> fail(CANT_UNPACK_FA2_BID_ASSET)
      end;
    )
    | FA12 -> (
      match unpack<FA12_asset>(pt_transfer.ptp_asset) with
        | some(buyAsset) -> (
            transfer 0tz to buyAsset.fa12_asset_contract call %transfer<address * address * nat>((pt_transfer.ptp_origin, pt_transfer.ptp_destination, pt_transfer.ptp_amount))
        )
        | none -> fail(CANT_UNPACK_FA12_BID_ASSET)
        end
      )
    | XTZ -> (
          transfer (pt_transfer.ptp_amount*1utz) to pt_transfer.ptp_destination;
      )
    end;
  }
}


entry default() {}